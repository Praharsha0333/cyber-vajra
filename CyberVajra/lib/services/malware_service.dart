import 'package:fraud_detector_app/other/API%20Keys.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

Future<List<MapEntry<String, int>>> getTopMalware() async {
  const String apiKey = ApiKeys.malwareApi;
  final url = Uri.parse('https://mb-api.abuse.ch/api/v1/');

  // --- UPDATE: Changed the selector from 'time' to '100' ---
  // This fetches the last 100 added samples, giving a more diverse result
  // than just fetching samples from the last hour.
  final requestBody = {'query': 'get_recent', 'selector': '100'};

  try {
    final response = await http.post(
      url,
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Auth-Key': apiKey.trim(),
      },
      body: requestBody,
    );

    if (response.statusCode == 200) {
      final decodedResponse = jsonDecode(response.body);
      final List<dynamic> samples = decodedResponse['data'];

      final Map<String, int> malwareCounts = {};
      for (var sample in samples) {
        final signature = sample['signature'];
        if (signature != null) {
          malwareCounts[signature] = (malwareCounts[signature] ?? 0) + 1;
        }
      }

      final sortedMalware = malwareCounts.entries.toList()
        ..sort((a, b) => b.value.compareTo(a.value));

      // --- UPDATE: Group smaller results into an "Other" category ---
      // This ensures the chart is always clean and readable.
      if (sortedMalware.length > 5) {
        final top5 = sortedMalware.take(4).toList();
        final otherCount = sortedMalware
            .skip(4)
            .fold(0, (sum, item) => sum + item.value);
        return [...top5, MapEntry('Other', otherCount)];
      }

      return sortedMalware;
    } else {
      throw Exception(
          'Failed to load malware data. Status Code: ${response.statusCode}, Response Body: ${response.body}');
    }
  } catch (e) {
    throw Exception('Error fetching or processing data: $e');
  }
}
