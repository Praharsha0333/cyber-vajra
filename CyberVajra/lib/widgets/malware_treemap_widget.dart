import 'package:flutter/material.dart';
import 'package:syncfusion_flutter_charts/charts.dart';
import '../services/malware_service.dart';

// A simple data model for the chart
class MalwareDataPoint {
  final String name;
  final int count;
  MalwareDataPoint(this.name, this.count);
}

class TopMalwareDonutChart extends StatelessWidget {
  const TopMalwareDonutChart({super.key});

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    // --- NEW: A predefined list of neon colors for the chart slices ---
    final List<Color> chartColors = [
      Colors.cyanAccent,
      Colors.lightGreenAccent,
      Colors.yellowAccent,
      Colors.orangeAccent,
      Colors.redAccent,
      Colors.purpleAccent,
    ];

    return FutureBuilder<List<MapEntry<String, int>>>(
      future: getTopMalware(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Center(child: CircularProgressIndicator());
        }

        if (snapshot.hasError) {
          return Center(child: Text('Error: ${snapshot.error}', style: TextStyle(color: Colors.red[300])));
        }

        if (snapshot.hasData && snapshot.data!.isNotEmpty) {
          final chartData = snapshot.data!
              .map((entry) => MalwareDataPoint(entry.key, entry.value))
              .toList();

          // --- FIX: The UI is now wrapped in a Column with Flexible children ---
          // This allows the chart and legend to share space without overflowing.
          return Column(
            children: [
              // --- FIX: The SfCircularChart is now wrapped in a Flexible widget ---
              // This allows it to shrink or grow to fit the available space.
              Flexible(
                child: SfCircularChart(
                  // Assign the neon colors to the chart's palette
                  palette: chartColors,
                  series: <CircularSeries>[
                    DoughnutSeries<MalwareDataPoint, String>(
                      dataSource: chartData,
                      xValueMapper: (MalwareDataPoint data, _) => data.name,
                      yValueMapper: (MalwareDataPoint data, _) => data.count,
                      // --- UI UPDATE: Styled data labels ---
                      dataLabelSettings: const DataLabelSettings(
                        isVisible: true,
                        labelPosition: ChartDataLabelPosition.outside,
                        textStyle: TextStyle(
                          color: Colors.white,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      // --- UI UPDATE: Glowing effect on the selected slice ---
                      explode: true,
                      explodeIndex: 0, // Explode the largest slice
                    )
                  ],
                ),
              ),
              // --- FIX: The Legend is now a separate, flexible widget ---
              // This ensures it has space without causing the chart to be cropped.
              SizedBox(
                height: 100, // Give the legend a max height
                child: SingleChildScrollView(
                  child: Wrap(
                    spacing: 16.0,
                    runSpacing: 8.0,
                    alignment: WrapAlignment.center,
                    children: chartData.asMap().entries.map((entry) {
                      final index = entry.key;
                      final data = entry.value;
                      // Use the same colors as the chart for the legend indicators
                      final color = chartColors[index % chartColors.length];
                      return _buildLegendItem(color, data.name);
                    }).toList(),
                  ),
                ),
              ),
            ],
          );
        }

        return const Center(child: Text('No malware data available.'));
      },
    );
  }

  // --- NEW: A helper widget for building styled legend items ---
  Widget _buildLegendItem(Color color, String text) {
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        Container(
          width: 10,
          height: 10,
          decoration: BoxDecoration(
            color: color,
            shape: BoxShape.circle,
            boxShadow: [
              BoxShadow(
                color: color.withOpacity(0.7),
                blurRadius: 5,
              ),
            ],
          ),
        ),
        const SizedBox(width: 6),
        Text(text, style: TextStyle(color: Colors.grey[300], fontSize: 12)),
      ],
    );
  }
}
